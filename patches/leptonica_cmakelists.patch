diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6535632..47d67ef 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,7 +8,7 @@
 #
 ###############################################################################
 
-cmake_minimum_required(VERSION 2.8.11)
+cmake_minimum_required(VERSION 3.1.3)
 cmake_policy(SET CMP0054 NEW)
 
 # In-source builds are disabled.
@@ -55,6 +55,8 @@ else()
 endif()
 if(UNIX)
     option(SYM_LINK "Create symlink leptonica -> lept on UNIX" OFF)
+    option(LIBWEBP_SUPPORT "Build with WebP support" OFF)
+    option(OPENJPEG_SUPPORT "Build with OpenJPEG support" OFF)
 endif()
 
 if(NOT SW_BUILD)
@@ -65,46 +67,61 @@ if(NOT SW_BUILD)
     find_package(ZLIB)
     find_package(PkgConfig)
     if (PKG_CONFIG_FOUND)
-        pkg_check_modules(WEBP libwebp QUIET)
-        pkg_check_modules(WEBPMUX libwebpmux>=${MINIMUM_WEBPMUX_VERSION} QUIET)
-        pkg_check_modules(JP2K libopenjp2>=2.0 QUIET)
-    endif()
-    if(NOT WEBP)
-        find_path(WEBP_INCLUDE_DIR /webp/decode.h)
-        find_library(WEBP_LIBRARY NAMES webp)
-        if (WEBP_INCLUDE_DIR AND WEBP_LIBRARY)
-            set(WEBP 1)
-            set(WEBP_FOUND TRUE)
-            set(WEBP_LIBRARIES ${WEBP_LIBRARY})
-            set(WEBP_INCLUDE_DIRS ${WEBP_INCLUDE_DIR})
-        endif()
-    endif()
-    if(NOT WEBPMUX)
-        find_path(WEBPMUX_INCLUDE_DIR /webp/mux.h)
-        #TODO:  check minimal required version
-        if(NOT WEBPMUX_INCLUDE_DIR)
-            message(STATUS "Can not find: /webp/mux.h")
-        endif()
-        if(NOT "${WEBPMUX_INCLUDE_DIR}" STREQUAL "${WEBP_INCLUDE_DIR}")
-            set(WEBP_INCLUDE_DIRS ${WEBP_INCLUDE_DIRS} ${WEBPMUX_INCLUDE_DIR})
-        endif()
-        find_library(WEBPMUX_LIBRARY NAMES webpmux)
-        if (WEBPMUX_INCLUDE_DIR AND WEBPMUX_LIBRARY)
-            set(WEBPMUX 1)
-            set(HAVE_LIBWEBP_ANIM 1)
-            set(WEBPMUX_FOUND TRUE)
-            set(WEBP_LIBRARIES ${WEBP_LIBRARIES} ${WEBPMUX_LIBRARY})
+        if(LIBWEBP_SUPPORT)
+            pkg_check_modules(WEBP libwebp QUIET)
+            pkg_check_modules(WEBPMUX libwebpmux>=${MINIMUM_WEBPMUX_VERSION} QUIET)
+            if(NOT WEBP)
+                find_path(WEBP_INCLUDE_DIR /webp/decode.h)
+                find_library(WEBP_LIBRARY NAMES webp)
+                if (WEBP_INCLUDE_DIR AND WEBP_LIBRARY)
+                    set(WEBP 1)
+                    set(WEBP_FOUND TRUE)
+                    set(WEBP_LIBRARIES ${WEBP_LIBRARY})
+                    set(WEBP_INCLUDE_DIRS ${WEBP_INCLUDE_DIR})
+                endif()
+            endif()
+            if(NOT WEBPMUX)
+                find_path(WEBPMUX_INCLUDE_DIR /webp/mux.h)
+                #TODO:  check minimal required version
+                if(NOT WEBPMUX_INCLUDE_DIR)
+                    message(STATUS "Can not find: /webp/mux.h")
+                endif()
+                if(NOT "${WEBPMUX_INCLUDE_DIR}" STREQUAL "${WEBP_INCLUDE_DIR}")
+                    set(WEBP_INCLUDE_DIRS ${WEBP_INCLUDE_DIRS} ${WEBPMUX_INCLUDE_DIR})
+                endif()
+                find_library(WEBPMUX_LIBRARY NAMES webpmux)
+                if (WEBPMUX_INCLUDE_DIR AND WEBPMUX_LIBRARY)
+                    set(WEBPMUX 1)
+                    set(HAVE_LIBWEBP_ANIM 1)
+                    set(WEBPMUX_FOUND TRUE)
+                    set(WEBP_LIBRARIES ${WEBP_LIBRARIES} ${WEBPMUX_LIBRARY})
+                endif()
+            endif()
         endif()
-    endif()
-    if(NOT JP2K)
-        find_path(JP2K_INCLUDE_DIR /openjpeg-2.3/openjpeg.h)
-        find_library(JP2K_LIBRARY NAMES openjp2)
-        if (JP2K_INCLUDE_DIR AND JP2K_LIBRARY)
-             set(JP2K 1)
-             set(JP2K_FOUND TRUE)
-             set(JP2K_LIBRARIES ${JP2K_LIBRARY})
-             set(JP2K_INCLUDE_DIRS ${JP2K_INCLUDE_DIR})
-             set(HAVE_LIBJP2K 1)
+        if(OPENJPEG_SUPPORT)
+            pkg_check_modules(JP2K libopenjp2>=2.0 QUIET)
+            if(NOT JP2K)
+                find_path(JP2K_INCLUDE_DIR /openjpeg-2.3/openjpeg.h)
+                find_library(JP2K_LIBRARY NAMES openjp2)
+                if (JP2K_INCLUDE_DIR AND JP2K_LIBRARY)
+                    set(JP2K 1)
+                    set(JP2K_FOUND TRUE)
+                    set(JP2K_LIBRARIES ${JP2K_LIBRARY})
+                    set(JP2K_INCLUDE_DIRS ${JP2K_INCLUDE_DIR})
+                    set(HAVE_LIBJP2K 1)
+                endif()
+            endif()
+            if(NOT JP2K)
+                find_path(JP2K_INCLUDE_DIR /openjpeg-2.4/openjpeg.h)
+                find_library(JP2K_LIBRARY NAMES openjp2)
+                if (JP2K_INCLUDE_DIR AND JP2K_LIBRARY)
+                    set(JP2K 1)
+                    set(JP2K_FOUND TRUE)
+                    set(JP2K_LIBRARIES ${JP2K_LIBRARY})
+                    set(JP2K_INCLUDE_DIRS ${JP2K_INCLUDE_DIR})
+                    set(HAVE_LIBJP2K 1)
+                endif()
+           endif()
         endif()
     endif()
 else() # SW_BUILD=ON
@@ -192,7 +209,11 @@ endif()
 
 set(AUTOCONFIG_SRC ${CMAKE_CURRENT_BINARY_DIR}/config_auto.h.in)
 set(AUTOCONFIG ${CMAKE_CURRENT_BINARY_DIR}/src/config_auto.h)
-set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} "${CMAKE_PREFIX_PATH}/include" "${CMAKE_INSTALL_PREFIX}/include")
+if (HAVE_LIBJP2K)
+  set(ADDITIONAL_INCLUDE_DIRS "${JP2K_INCLUDE_DIR}")
+endif()
+set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} "${CMAKE_PREFIX_PATH}/include" "${CMAKE_INSTALL_PREFIX}/include" "${ADDITIONAL_INCLUDE_DIRS}")
+
 
 include(Configure)
 
